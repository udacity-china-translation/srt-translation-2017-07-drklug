1
00:00:00,240 --> 00:00:02,570
光速是一个常量

2
00:00:02,570 --> 00:00:05,160
但是在 Python 中变量最重要的特点就是它们可以变化

3
00:00:05,160 --> 00:00:08,330
这也是它们被称作变量的原因

4
00:00:08,330 --> 00:00:11,640
一旦我们定义了变量 我们就可以改变它的值

5
00:00:11,640 --> 00:00:13,960
当我们再次使用这个名称的时候

6
00:00:13,960 --> 00:00:16,200
它就代表一个新的值

7
00:00:16,200 --> 00:00:19,255
我们在解释器中看一下 我们可以改变变量 cycles_per_second 的值

8
00:00:19,255 --> 00:00:26,044
假设我们有一个更快的处理器 现在我们完成升级

9
00:00:26,044 --> 00:00:29,630
我们有一个 2.8Ghz 处理器 这个改变不会影响 cycle_distance 的值

10
00:00:29,630 --> 00:00:32,500
它的值是根据旧的 cycle_per_second 值计算出来的

11
00:00:32,500 --> 00:00:36,740
得到输出结果还是 0.111

12
00:00:36,740 --> 00:00:39,630
我们再来计算一次 这次 cycles_per_second 代表一个新的值

13
00:00:39,630 --> 00:00:41,940
因为我们已经改变了它所指向的值

14
00:00:41,940 --> 00:00:44,820
现在当我们输出 cycle_distance 时

15
00:00:44,820 --> 00:00:48,216
我们发现它的值改变了

16
00:00:48,216 --> 00:00:52,011
现在我们有一个更快的处理器 我们第二次输出 cycle_distance

17
00:00:52,011 --> 00:00:55,254
结果每个 cycle 只有 0.107 米 小于 11 厘米

18
00:00:55,254 --> 00:00:58,560
所以当我们进行赋值后

19
00:00:58,560 --> 00:01:01,980
相同的语句

20
00:01:01,980 --> 00:01:04,727
经过不同次运算后 有了不同的结果

21
00:01:04,727 --> 00:01:07,566
speed_of_light 除以 cycles_per_second 的值

22
00:01:07,566 --> 00:01:10,352
取决于 cycles_per_second 的当前值

23
00:01:10,352 --> 00:01:13,126
我们计算第一个值时

24
00:01:13,126 --> 00:01:16,703
cycles_per_second 的值是 27 亿 所以我们得到了一个不同的结果

25
00:01:16,703 --> 00:01:20,095
第一次我们得到 0.111 的结果

26
00:01:20,095 --> 00:01:22,790
当我们第二次运算同样的语句时

27
00:01:22,790 --> 00:01:26,530
结果是不同的 因为 cycles_per_second 的值不同了

28
00:01:26,530 --> 00:01:29,950
这就是我们在第二次得到了一个更小的 cycle_distance 的值的原因

29
00:01:29,950 --> 00:01:32,290
我们再来看看其它例子

30
00:01:32,290 --> 00:01:35,160
确保我们理解了赋值

31
00:01:35,160 --> 00:01:38,841
假设我们有一个变量 days 我们将它的值预设为 7乘以7

32
00:01:38,841 --> 00:01:42,290
这样就引入了一个名称 days

33
00:01:42,290 --> 00:01:44,510
然后它指向一个值

34
00:01:44,510 --> 00:01:47,533
就是这个表达式的结果 所以它指向的值是 49

35
00:01:47,533 --> 00:01:49,945
这就意味着 当我们看到名称 days 时

36
00:01:49,945 --> 00:01:53,430
我们就会看到它指向什么 然后我们会得到结果 49

37
00:01:53,430 --> 00:01:56,890
如果我们再一次赋值 

38
00:01:56,890 --> 00:02:02,100
让我们去掉一天 那么 days 的值就是 48

39
00:02:02,100 --> 00:02:04,625
这就是一个新的赋值 我们已经有一个名称 days

40
00:02:04,625 --> 00:02:07,840
它原本指向49 但是经过新的赋值后

41
00:02:07,840 --> 00:02:09,800
它将代表一个新的值

42
00:02:09,800 --> 00:02:13,840
现在它的值是 48

43
00:02:13,840 --> 00:02:17,280
49 这个数字依然存在 但是它不再是 days 的值

44
00:02:17,280 --> 00:02:21,880
现在 days 代表 48

45
00:02:21,880 --> 00:02:24,820
更有趣的是我们现在可以在他们自身的赋值语句中使用变量

46
00:02:24,820 --> 00:02:27,380
这里我们有一个赋值语句

47
00:02:27,380 --> 00:02:29,680
将 days 的值减去 1

48
00:02:29,680 --> 00:02:32,840
并把这个值分配给 days

49
00:02:32,840 --> 00:02:36,070
那么这次赋值的结果是什么？

50
00:02:36,070 --> 00:02:39,020
我们首先运算语句的右侧

51
00:02:39,020 --> 00:02:41,300
我们看一下 days 的值 是48

52
00:02:41,300 --> 00:02:44,160
将 days 的值减去 1 得到的值就是 47

53
00:02:44,160 --> 00:02:48,210
然后我们给变量 days 赋值

54
00:02:48,210 --> 00:02:51,450
现在变量 days 的值就是 47

55
00:02:51,450 --> 00:02:55,780
不再是 48

56
00:02:55,780 --> 00:02:59,080
我们可以继续 如果我们再写一个相同的赋值语句

57
00:02:59,080 --> 00:03:02,310
也会再次改变变量的值

58
00:03:02,310 --> 00:03:05,190
这次 days 原来的值是 47

59
00:03:05,190 --> 00:03:09,560
我们减去1 那么值就是 46

60
00:03:09,560 --> 00:03:12,890
然后我们给 days 赋值 这就改变了它的值

61
00:03:12,890 --> 00:03:16,320
所以现在 days 的值是 46 

62
00:03:16,320 --> 00:03:19,040
需要注意的重点是 这并不是一个等于号

63
00:03:19,040 --> 00:03:22,320
它看起来像一个等于号 如果你学过代数的话

64
00:03:22,320 --> 00:03:24,620
你会认为这样的方程式看起来像个等式

65
00:03:24,620 --> 00:03:27,010
但是无解

66
00:03:27,010 --> 00:03:30,270
在 Python 以及大部分编程语言中

67
00:03:30,270 --> 00:03:33,670
等于号不代表相等的意思 是赋值的意思

68
00:03:33,670 --> 00:03:37,810
你可以把它看作是一个箭头 

69
00:03:37,810 --> 00:03:41,140
这个箭头就是把右侧的值赋给左侧的名称

70
00:03:41,140 --> 00:03:43,950
在大部分编程语言中 我们不写箭头

71
00:03:43,950 --> 00:03:47,270
因为箭头比较难输入

72
00:03:47,270 --> 00:03:50,730
而且许多程序需要大量赋值

73
00:03:50,730 --> 00:03:51,870
但是你应该知道等于号

74
00:03:51,870 --> 00:03:54,710
不是等于的意思 而是代表赋值
